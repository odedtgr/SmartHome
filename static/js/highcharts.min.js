var dynamicChart;var channelsLoaded=0;var channelKeys=[];channelKeys.push({channelNumber:112955,name:"Temperature",key:"8UKAQRZZVL67BGVI",fieldList:[{field:3,axis:"C"}]});var myOffset=new Date().getTimezoneOffset();function getChartDate(a){return Date.UTC(a.substring(0,4),a.substring(5,7)-1,a.substring(8,10),a.substring(11,13),a.substring(14,16),a.substring(17,19))-(myOffset*60000)}$(document).ready(function(){var seriesCounter=0;for(var channelIndex=0;channelIndex<channelKeys.length;channelIndex++){for(var fieldIndex=0;fieldIndex<channelKeys[channelIndex].fieldList.length;fieldIndex++){channelKeys[channelIndex].fieldList[fieldIndex].series=seriesCounter;seriesCounter++}}for(var channelIndex=0;channelIndex<channelKeys.length;channelIndex++){channelKeys[channelIndex].loaded=false;loadThingSpeakChannel(channelIndex,channelKeys[channelIndex].channelNumber,channelKeys[channelIndex].key,channelKeys[channelIndex].fieldList)}chart.reflow();function loadThingSpeakChannel(sentChannelIndex,channelNumber,key,sentFieldList){var fieldList=sentFieldList;var channelIndex=sentChannelIndex;$.getJSON("https://www.thingspeak.com/channels/"+channelNumber+"/feed.json?callback=?&amp;offset=0&amp;results=8000;key="+key,function(data){if(data=="-1"){$("#chart-container").append("This channel is not public.  To embed charts, the channel must be public or a read key must be specified.");window.console&&console.log("Thingspeak Data Loading Error")}for(var fieldIndex=0;fieldIndex<fieldList.length;fieldIndex++){fieldList[fieldIndex].data=[];for(var h=0;h<data.feeds.length;h++){var p=[];var fieldStr="data.feeds["+h+"].field"+fieldList[fieldIndex].field;var v=eval(fieldStr);p[0]=getChartDate(data.feeds[h].created_at);p[1]=parseFloat(v);if(!isNaN(parseInt(v))){fieldList[fieldIndex].data.push(p)}}fieldList[fieldIndex].name=eval("data.channel.field"+fieldList[fieldIndex].field)}channelKeys[channelIndex].fieldList=fieldList;channelKeys[channelIndex].loaded=true;channelsLoaded++;if(channelsLoaded==channelKeys.length){createChart()}})}function createChart(){var chartOptions={chart:{renderTo:"chart-container",zoomType:"x"},rangeSelector:{buttons:[{count:1,type:"hour",text:"1H"},{count:12,type:"hour",text:"12H"},{count:1,type:"day",text:"D"},{count:1,type:"week",text:"W"},{count:1,type:"month",text:"M"},{count:1,type:"year",text:"Y"},{type:"all",text:"All"}],inputEnabled:false,selected:2},title:{text:""},plotOptions:{line:{gapSize:5},series:{connectNulls:true,marker:{radius:2},animation:false,step:false,turboThrehold:1000,borderWidth:0}},tooltip:{valueDecimals:1,valueSuffix:"",xDateFormat:"%Y-%m-%d<br/>%H:%M:%S %p"},xAxis:{type:"datetime",ordinal:false,min:Date.UTC(2013,2,28),dateTimeLabelFormats:{hour:"%I %p",minute:"%l:%M %p"},title:{text:"LeftAxis"}},yAxis:[{title:{text:""},id:"R"},{title:{text:"Temperature"},opposite:true,id:"C"}],legend:{enabled:false},navigator:{baseSeries:0},series:[]};for(var channelIndex=0;channelIndex<channelKeys.length;channelIndex++){for(var fieldIndex=0;fieldIndex<channelKeys[channelIndex].fieldList.length;fieldIndex++){chartOptions.series.push({data:channelKeys[channelIndex].fieldList[fieldIndex].data,index:channelKeys[channelIndex].fieldList[fieldIndex].series,yAxis:channelKeys[channelIndex].fieldList[fieldIndex].axis,name:channelKeys[channelIndex].fieldList[fieldIndex].name})}}chartOptions.xAxis.title.text="Date";dynamicChart=new Highcharts.StockChart(chartOptions)}});